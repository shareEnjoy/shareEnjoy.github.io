[{"title":"怎么查看ubuntu是32位还是64位","date":"2019-10-17T07:56:33.000Z","path":"2019/10/17/ubuntu-see-64or32bit/","text":"查看操作系统是32位的还是64位的在控制台输入： 1$ sudo uname --m 回车后：如果显示i686,则表示安装了32位操作系统如果显示 x86_64，则表示安装了64位操作系统 如果想知道更多信息可以试试如下命令：1234$ sudo uname --s #显示内核名字$ sudo uname --r #显示内核版本$ sudo uname --n #显示网络主机名$ sudo uname --p #显示cpu","tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://shareen.work/tags/ubuntu/"},{"name":"linux","slug":"linux","permalink":"https://shareen.work/tags/linux/"}]},{"title":"jQuery.validator.addMethod自定义验证规则","date":"2019-10-09T05:51:19.000Z","path":"2019/10/09/jQuery-validator-addMethod/","text":"jQuery.validate是一款非常不错的表单验证工具，简单易上手，而且能达到很好的体验效果 一、用前必备官方网站：http://bassistance.de/jquery-plugins/jquery-plugin-validation/（注意下载最新版）需要JQuery版本：1.2.6+, 兼容 1.3.2 12&lt;script src=\"../js/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;&lt;script src=\"../js/jquery.validate.js\" type=\"text/javascript\"&gt;&lt;/script&gt; 二、默认校验规则1234567891011121314151617required:true #必输字段remote:\"check.php\" #使用ajax方法调用check.php验证输入值email:true #必须输入正确格式的电子邮件url:true #必须输入正确格式的网址date:true #必须输入正确格式的日期dateISO:true #必须输入正确格式的日期(ISO)，例如：2009-06-23，1998/01/22 只验证格式，不验证有效性number:true #必须输入合法的数字(负数，小数)digits:true #必须输入整数creditcard: #必须输入合法的信用卡号equalTo:\"#field\" #输入值必须和#field相同accept: #输入拥有合法后缀名的字符串（上传文件的后缀）maxlength:5 #输入长度最多是5的字符串(汉字算一个字符)minlength:10 #输入长度最小是10的字符串(汉字算一个字符)rangelength:[5,10] #输入长度必须介于 5 和 10 之间的字符串\")(汉字算一个字符)range:[5,10] #输入值必须介于 5 和 10 之间max:5 #输入值不能大于5min:10 #输入值不能小于10 三、默认的提示123456789101112131415161718192021222324252627282930313233343536373839404142messages: &#123;required: \"This field is required.\",remote: \"Please fix this field.\",email: \"Please enter a valid email address.\",url: \"Please enter a valid URL.\",date: \"Please enter a valid date.\",dateISO: \"Please enter a valid date (ISO).\",dateDE: \"Bitte geben Sie ein g眉ltiges Datum ein.\",number: \"Please enter a valid number.\",numberDE: \"Bitte geben Sie eine Nummer ein.\",digits: \"Please enter only digits\",creditcard: \"Please enter a valid credit card number.\",equalTo: \"Please enter the same value again.\",accept: \"Please enter a value with a valid extension.\",maxlength: $.validator.format(\"Please enter no more than &#123;0&#125; characters.\"),minlength: $.validator.format(\"Please enter at least &#123;0&#125; characters.\"),rangelength: $.validator.format(\"Please enter a value between &#123;0&#125; and &#123;1&#125; characters long.\"),range: $.validator.format(\"Please enter a value between &#123;0&#125; and &#123;1&#125;.\"),max: $.validator.format(\"Please enter a value less than or equal to &#123;0&#125;.\"),min: $.validator.format(\"Please enter a value greater than or equal to &#123;0&#125;.\")&#125;,如需要修改，可在js代码中加入：jQuery.extend(jQuery.validator.messages, &#123;required: \"必选字段\",remote: \"请修正该字段\",email: \"请输入正确格式的电子邮件\",url: \"请输入合法的网址\",date: \"请输入合法的日期\",dateISO: \"请输入合法的日期 (ISO).\",number: \"请输入合法的数字\",digits: \"只能输入整数\",creditcard: \"请输入合法的信用卡号\",equalTo: \"请再次输入相同的值\",accept: \"请输入拥有合法后缀名的字符串\",maxlength: jQuery.validator.format(\"请输入一个长度最多是 &#123;0&#125; 的字符串\"),minlength: jQuery.validator.format(\"请输入一个长度最少是 &#123;0&#125; 的字符串\"),rangelength: jQuery.validator.format(\"请输入一个长度介于 &#123;0&#125; 和 &#123;1&#125; 之间的字符串\"),range: jQuery.validator.format(\"请输入一个介于 &#123;0&#125; 和 &#123;1&#125; 之间的值\"),max: jQuery.validator.format(\"请输入一个最大为 &#123;0&#125; 的值\"),min: jQuery.validator.format(\"请输入一个最小为 &#123;0&#125; 的值\")&#125;);//推荐做法，将此文件放入messages_cn.js中，在页面中引入&lt;script src=\"../js/messages_cn.js\" type=\"text/javascript\"&gt;&lt;/script&gt; 四、使用方法html: 1234567891011121314151617181920212223//head里需要加入#&lt;script src=\"../js/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;#&lt;script src=\"../js/jquery.validate.js\" type=\"text/javascript\"&gt;&lt;/script&gt;#&lt;script src=\"./js/messages_cn.js\" type=\"text/javascript\"&gt;&lt;/script&gt;&lt;form action=\"\" method=\"post\" id=\"registerForm\" onsubmit=\"return toVaild()\"&gt; &lt;div&gt; &lt;input type=\"text\" name=\"userName\" class=\"username\" placeholder=\"您的用户名\" autocomplete=\"off\"/&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=\"password\" name=\"userPw\" class=\"password\" placeholder=\"输入密码\" oncontextmenu=\"return false\" onpaste=\"return false\" /&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=\"password\" name=\"confirm_password\" class=\"confirm_password\" placeholder=\"再次输入密码\" oncontextmenu=\"return false\" onpaste=\"return false\" /&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=\"text\" name=\"userPhoneNum\" class=\"phone_number\" placeholder=\"输入手机号码\" autocomplete=\"off\" id=\"number\"/&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=\"email\" name=\"userMail\" class=\"email\" placeholder=\"输入邮箱地址\" oncontextmenu=\"return false\" onpaste=\"return false\" /&gt; &lt;/div&gt; &lt;button id=\"submit\" type=\"submit\"&gt;注 册&lt;/button&gt;&lt;/form&gt; messages_cn.js: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677//jquery.validate表单验证$(document).ready(function()&#123; //注册表单验证 $(\"#registerForm\").validate(&#123; rules:&#123; userName:&#123; required:true,//必填 minlength:3, //最少3个字符 maxlength:32,//最多20个字符 uName:true,//自定义的规则 /*remote:&#123; url:\"http://kouss.com/demo/Sharelink/remote.json\",//用户名重复检查，别跨域调用 type:\"post\", &#125;,*/ &#125;, userPw:&#123; required:true, minlength:3, maxlength:32, &#125;, userMail:&#123; required:true, email:true, &#125;, confirm_password:&#123; required:true, minlength:3, equalTo:'.password' &#125;, userPhoneNum:&#123; required:true, userPhoneNum:true,//自定义的规则 digits:true,//整数 &#125; &#125;, //错误信息提示 messages:&#123; userName:&#123; required:\"必须填写用户名\", minlength:\"用户名至少为3个字符\", maxlength:\"用户名至多为32个字符\", //remote: \"用户名已存在\", &#125;, userPw:&#123; required:\"必须填写密码\", minlength:\"密码至少为3个字符\", maxlength:\"密码至多为32个字符\", &#125;, userMail:&#123; required:\"请输入邮箱地址\", email: \"请输入正确的email地址\" &#125;, confirm_password:&#123; required: \"请再次输入密码\", minlength: \"确认密码不能少于3个字符\", equalTo: \"两次输入密码不一致\",//与另一个元素相同 &#125;, userPhoneNum:&#123; required:\"请输入手机号码\", digits:\"请输入正确的手机号码\", &#125;, &#125;, &#125;); // 字母和数字的验证 jQuery.validator.addMethod(\"uName\", function(value, element) &#123; var uName = /^([a-zA-Z0-9]+)$/; return this.optional(element) || (uName.test(value)); &#125;, \"用户名仅支持非空，数字和英文\"); //添加自定义验证规则 jQuery.validator.addMethod(\"userPhoneNum\", function(value, element) &#123; var length = value.length; var userPhoneNum = /^1[3456789]\\d&#123;9&#125;$/ return this.optional(element) || (length == 11 &amp;&amp; userPhoneNum.test(value)); &#125;, \"手机号码格式错误\");&#125;); 方法：$.validator.addMethod(name,function(value,element){ return true||false },message)；参数：第一个参数:用于type匹配的名称，自定义。 第二个参数:是一个function函数，决定了验证是否成功！里面是自定义验证。 第三个参数：当验证不成功时返回的提示错误信息。","tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://shareen.work/tags/jQuery/"},{"name":"html5","slug":"html5","permalink":"https://shareen.work/tags/html5/"},{"name":"validate","slug":"validate","permalink":"https://shareen.work/tags/validate/"}]},{"title":"Ubuntu配置Tomcat改80端口报错","date":"2019-09-30T03:01:10.000Z","path":"2019/09/30/ubuntu-tomcat-80bug/","text":"本地环境：*ubuntu 18.04 LTS*jdk 1.8.0_181*tomcat 9.0.26 使用Ubuntu 18.04 环境部署 Java Web 应用，在配置 Tomcat时，发现8080端口没问题，改为80端口后就报错，然后自己网上找了些资料改去改来，不是[“http-nio-80”]，就APR，要么就拒绝连接。明天前面都用得好好的！后来又网上看了很多，才发现问题，然后就写这篇记忆下。 具体问题为在 Linux中对非root用户只能使用 1024 及以上的端口号，所以 80 端口对非 root 用户为禁用状态。第一种解决方法：使用 root 用户去配置并启动 Tomcat。这里讲的是第二种解决方法：使用 iptables 的转发功能，将 80 端口消息转发给 8080 端口。如果嫌麻烦，建议第一种。自己记住就行了。第二种教程如下： 一、前期工作1.查看系统是否安装防火墙： 1$ whereis iptables 2.若已安装则下面显示为： 12$ iptables: $ /sbin/iptables /etc/iptables.rules /usr/share/iptables /usr/share/man/man8/iptables.8.gz 3.否之，安装防火墙： 1$ sudo apt-get install iptables 4.查看防火墙信息： 1$ iptables -L -n 二、配置防火墙1.创建 iptables.rules 文件： 1$ vi /etc/iptables.rules 2.按 i 进入编辑模式，添加以下规则： 12345678910111213141516171819*filter:INPUT DROP [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]:syn-flood - [0:0]-A INPUT -i lo -j ACCEPT-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8443 -j ACCEPT-A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT-A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood-A INPUT -j REJECT --reject-with icmp-host-prohibited-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN-A syn-flood -j REJECT --reject-with icmp-port-unreachableCOMMIT 1234522 端口为 SSH 默认端口 80 端口为 HTTP 默认端口 443 端口为 HTTPS 默认端口 8080 端口为 Tomcat 默认的 HTTP 端口 8443 端口为 Tomcat 默认的 HTTPS 端口 3.使防火墙规则生效： 1$ iptables-restore &lt; /etc/iptables.rules 4.配置防火墙规则开机启动： *创建 iptables 文件： 1$ vi /etc/network/if-pre-up.d/iptables *添加以下内容： 12$ !/bin/bash$ iptables-restore &lt; /etc/iptables.rules 5.为 iptables 文件添加执行权限： 1$ chmod +x /etc/network/if-pre-up.d/iptables 6.查看规则是否生效： 1$ iptables -L -n 123456789101112131415161718192021222324Chain INPUT (policy DROP)target prot opt source destination ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 state RELATED,ESTABLISHEDACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:22ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:80ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:443ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:8080ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 state NEW tcp dpt:8443ACCEPT icmp -- 0.0.0.0/0 0.0.0.0/0 limit: avg 100/sec burst 100ACCEPT icmp -- 0.0.0.0/0 0.0.0.0/0 limit: avg 1/sec burst 10syn-flood tcp -- 0.0.0.0/0 0.0.0.0/0 tcp flags:0x17/0x02REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibitedChain FORWARD (policy ACCEPT)target prot opt source destination Chain OUTPUT (policy ACCEPT)target prot opt source destination Chain syn-flood (1 references)target prot opt source destination RETURN tcp -- 0.0.0.0/0 0.0.0.0/0 limit: avg 3/sec burst 6REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable 三、新增转发规则1.将 80 端口转发至 8080 端口 1$ iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 2.查看 80 端口相关的转发规则 1$ iptables -t nat -L -n | grep 80 返回： 1$ REDIRECT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:80 redir ports 8080 3.配置 Tomcat 服务端口为 8080*找到 Tomcat 安装目录下的 ../conf/server.xml 配置文件并且打开编辑如下内容，改为 8080 端口即可。*&lt;Connector port=”8080” protocol=”HTTP/1.1” 4.重启 Tomcat 服务，试一下应该就可以进行正常访问 80 端口了。 1$ service tomcat restart 四、删除转发规则1.将转发规则以数字序号排列显示: 1$ iptables -t nat -L -n --line-numbers Chain PREROUTING (policy ACCEPT) num target prot opt source destination 1 REDIRECT tcp – 0.0.0.0/0 0.0.0.0/0 tcp dpt:80 redir ports 8080 2.删除 8080 端口对于的转发规则： 1$ iptables -t nat -D PREROUTING 1 五、相关问题上述配置完成后，即可使用 IP 地址（或域名）+ 应用程序页面访问路径。如需直接使用 IP 地址（或域名）访问应用程序默认页面，应另外配置。另外，若参照上述配置时使用的是通过 域名 进行访问，则需要进行域名备案，同时需要指定访问的应用。当然可以暂且使用 域名:8080 进行访问，或是使用 https://域名 进行访问。 六、文章参考Ubuntu16.04配置Tomcat访问80端口","tags":[{"name":"tomcat","slug":"tomcat","permalink":"https://shareen.work/tags/tomcat/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://shareen.work/tags/ubuntu/"},{"name":"linux","slug":"linux","permalink":"https://shareen.work/tags/linux/"}]},{"title":"my first blog","date":"2019-09-27T07:53:52.000Z","path":"2019/09/27/my-first-blog/","text":"总结马上国庆了，在这几天里，总算把这个个人小站弄出来了！我太难了。最初是打算做个大的，买了域名，也用了服务器，后面也找了源码部署上去,效果也还行吧。不过服务器是免费的，那一套系统自己也没去改。想到后续搭建好了，需要更新等。就有点头疼。然后后面查资料的时候，看到了一些比较好的博客，然后发现他们基本都是基于GitHub搭建自己的免费个人博客。自己也有兴趣了，开始查资料，做准备。到了装环境的时候，简直要命，下一些包下了无数次还是失败，也尝试很多方法，然而没用。我都是两台电脑开工的。在Windows上试过，Ubuntu上试过，后来莫名其妙的好了，然后就开始设置主题等这些。最终结果还是好的，也完成了！！！自己还是很欣慰，然后将开始漫长的学习！ 关于后面自己毕竟还是太菜了，后面尽量会记录一些自己学习的啊，遇到的问题这些，用来记忆等！还会分享一些生活中有趣的！ 然后兴趣爱好这方面很广，就是技术更不上，希望后面能有提升！！！","tags":[{"name":"share","slug":"share","permalink":"https://shareen.work/tags/share/"}]}]